{
  "openapi": "3.0.0",
  "info": {
    "title": "Champs Marketplace API",
    "version": "1.0.0",
    "description": "API documentation for the Marketplace project, a comprehensive marketplace platform connecting buyers and sellers. Each seller manages their stall, stock, pricing, and discounts. Users can browse various stalls, add items to their cart, manage purchases, and rate vendors. Admins oversee user roles, stock, and platform operations. Key features include user management, shopping cart, checkout, rating system, and vendor stock management. The platform includes user, vendor, admin dashboards, contact form, login/signup, with optional features like subscriptions, email notifications, chatbot, and delivery. Built with Node, Express, Postgres, and React."
  },
  "servers": [
    {
      "url": "http://localhost:5500",
      "description": "Development server"
    },
    {
      "url": "https://champs-ec-be.onrender.com",
      "description": "Production server (HTTPS)"
    }
  ],
  "tags": [
    {
      "name": "Welcome",
      "description": "API endpoints for landing page"
    },
    {
      "name": "Search",
      "description": "API endpoints for landing page"
    },
    {
      "name": "Authentication",
      "description": "API endpoints for managing users"
    },
    {
      "name": "Users",
      "description": "API endpoints for managing Users"
    },
    {
      "name": "Roles",
      "description": "API endpoints for managing roles"
    },
    {
      "name": "AssignRole",
      "description": "API endpoints for assigning roles to users"
    },
    {
      "name": "Carts",
      "description": "API endpoints for access the user cart"
    },
    {
      "name": "Wishes",
      "description": "API endpoints for creating and managing wishlist"
    },
    {
      "name": "Wishes",
      "description": "API endpoints for creating and managing wishlist"
    },
    {
      "name": "Feature Product",
      "description": "API endpoints for feature/unfeature a product "
    },
    {
      "name": "Notifications",
      "description": "API endpoints for creating and managing wishlist"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Welcome",
        "tags": ["Welcome"],
        "responses": {
          "200": {
            "description": "Welcome Page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/search": {
      "get": {
        "summary": "Search items",
        "description": "Search for products or users based on query parameters. If authenticated, the search results will be filtered based on the user's role.",
        "tags": ["Search"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the item to search",
            "schema": { "type": "string" }
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price of the product",
            "schema": { "type": "number" }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price of the product",
            "schema": { "type": "number" }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of the product",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid item type or missing required parameters"
          },
          "404": {
            "description": "No items found matching the search criteria"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/signup": {
      "post": {
        "summary": "User Sign Up",
        "description": "Create a new user account",
        "tags": ["Authentication"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["firstName", "lastName", "email", "password"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "User created successfully" }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "summary": "User Sign In",
        "description": "Authenticate user and generate access token",
        "tags": ["Authentication"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["email", "password"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "User authenticated successfully" },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/api/users/otp/{token}": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify OTP for the seller",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "OTP Token",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Login Successful" },
          "401": { "description": "Wrong OTP entered" },
          "404": { "description": "Invalid token" }
        }
      }
    },
    "/api/users/reset-password": {
      "post": {
        "summary": "User Reset Password",
        "description": "Reset User Paassword via Email",
        "tags": ["Authentication"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": ["email"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset Instructions sent successfully"
          },
          "400": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/users/reset-password/{token}": {
      "patch": {
        "summary": "User Reset Password",
        "description": "Reset User Paassword via Email",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string"
                  },
                  "confirmPassword": {
                    "type": "string"
                  }
                },
                "required": ["newPassword", "confirmPassword"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password updated succesffully"
          },
          "400": {
            "description": "Passwords don't match"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get All Users",
        "description": "Get a list of all users",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "List of all users"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/{userId}": {
      "get": {
        "summary": "admin get single Users",
        "description": "get a single user information",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user information"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },

    "/api/users/{userId}/status": {
      "patch": {
        "summary": "Activate/Deactivate user account",
        "description": "admin should able to deactivate user account for various reason",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": { "type": "string" },
                  "message": { "type": "string" }
                },
                "required": ["status"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "User account deactiavted/reactivated" },
          "401": { "description": "Invalid credentials" },
          "404": { "description": "user not found" },
          "500": { "description": "internal server error" }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/users/google": {
      "get": {
        "summary": "Google Login",
        "description": "Allows users to log in using their Google account. When the user clicks the 'Sign in with Google' button, they will be redirected to this endpoint, which will handle the Google OAuth2 authentication flow.",
        "tags": ["Authentication"],
        "responses": {
          "302": {
            "description": "Redirect to Google Login",
            "headers": {
              "Location": {
                "schema": { "type": "string" },
                "description": "https://champs-ec-be.onrender.com/api/users/google"
              }
            }
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "summary": "Logout",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "user logout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "400": {
            "description": "Token is required"
          },
          "500": {
            "description": "internal server error"
          }
        },

        "security": [{ "Bearer": [] }]
      }
    },
    "/api/users/profile": {
      "get": {
        "summary": "User Profile",
        "tags": ["User profile page"],
        "responses": {
          "200": {
            "description": "Profile page",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": {} }
              }
            }
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/users/profiles": {
      "put": {
        "summary": "Edit Profile",
        "tags": ["User profile page"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "phone": { "type": "string" },
                  "birthDate": { "type": "string", "format": "date" },
                  "preferredLanguage": { "type": "string" },
                  "preferredCurrency": { "type": "string" },
                  "whereYouLive": { "type": "string" },
                  "billingAddress": { "type": "string" },
                  "profileImage": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Updated profile page" },
          "400": { "description": "Fail to update" }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/users/passwordupdate": {
      "patch": {
        "summary": "Updating user's password",
        "description": "Allowing user's to update their password",
        "tags": ["Updating password"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  },
                  "confirmPassword": {
                    "type": "string"
                  }
                },
                "required": ["oldPassword", "newPassword", "confirmPassword"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Password updated successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/roles": {
      "post": {
        "summary": "Create Role",
        "description": "Create a new role",
        "tags": ["Roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": ["name"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Role created successfully"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get All Roles",
        "description": "Get a list of all roles",
        "tags": ["Roles"],
        "responses": {
          "200": {
            "description": "List of all roles"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/roles/{id}": {
      "get": {
        "summary": "Get Role by ID",
        "description": "Get a role by its ID",
        "tags": ["Roles"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role found"
          },
          "404": {
            "description": "Role not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update Role",
        "description": "Update a role by its ID",
        "tags": ["Roles"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role updated successfully"
          },
          "404": {
            "description": "Role not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Role",
        "description": "Delete a role by its ID",
        "tags": ["Roles"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully"
          },
          "404": {
            "description": "Role not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/{userId}/roles": {
      "patch": {
        "summary": "Assign Role to User",
        "description": "Assign a role to a specific user",
        "tags": ["AssignRole"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleId": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role assigned to user successfully"
          },
          "404": {
            "description": "User or Role not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/products/{productId}/feature": {
      "patch": {
        "summary": "Feature Product",
        "description": "Feature a product to make it appear prominently on the platform.",
        "tags": ["Feature Product"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product to feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "featureEndDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date when the product feature will end"
                  }
                },
                "required": ["featureEndDate"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product featured successfully"
          },
          "400": {
            "description": "Bad request. Possible reasons: Product is already featured, feature end date is in the past, or feature end date is greater than expiration date."
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
,    
    "/api/products/check-expiration": {
      "post": {
        "summary": "Unlist expired products",
        "description": "Run expiration checking algorithm manually to unlist expired products",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Password reset Instructions sent successfully"
          },
          "400": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/categories": {
      "post": {
        "summary": "Product categories",
        "description": "add new product Category",
        "tags": ["Product Category"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryName": { "type": "string" }
                },
                "required": ["categoryName"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "Product category is created successfully" }
        },
        "security": [{ "Bearer": [] }]
      },
      "get": {
        "summary": "Get all product categories",
        "tags": ["Product Category"],
        "responses": {
          "200": {
            "description": "All product categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddProductCategory"
                  }
                }
              }
            }
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/categories/{catId}": {
      "get": {
        "tags": ["Product Category"],
        "summary": "get single product category",
        "parameters": [
          {
            "name": "catId",
            "required": true,
            "in": "path",
            "description": "category id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": " selected product catgeory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProductCategory"
                }
              }
            }
          },
          "404": {
            "description": "Product catgeory not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [{ "Bearer": [] }]
      },
      "patch": {
        "tags": ["Product Category"],
        "summary": "update product category",
        "parameters": [
          {
            "name": "catId",
            "required": true,
            "in": "path",
            "description": "category id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "product category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProductCategory"
                }
              }
            }
          },
          "404": {
            "description": "Product item not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [{ "Bearer": [] }]
      },
      "delete": {
        "tags": ["Product Category"],
        "summary": "Delete a product Category",
        "parameters": [
          {
            "name": "catId",
            "required": true,
            "in": "path",
            "description": "category id",
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "204": { "description": "Product category deleted" },
          "404": { "description": "Product category not found" },
          "500": { "description": "Internal Server Error" }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/products": {
      "post": {
        "summary": "Add new Product",
        "description": "Authenticate Seller could perform a CRUD operation over they own product",
        "tags": ["Seller Product CRUD"],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "productCategory": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "stockLevel": {
                    "type": "number"
                  },
                  "productPrice": {
                    "type": "number"
                  },
                  "productCurrency": {
                    "type": "string"
                  },
                  "productImage": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "productDescription": {
                    "type": "string"
                  },
                  "expireDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "productCategory",
                  "productName",
                  "productPrice",
                  "productCurrency",
                  "productDescription",
                  "productImage",
                  "stockLevel",
                  "expireDate"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Seller product is created successfully"
          },
          "401": {
            "description": "Invalid input, validation fail"
          },
          "409": {
            "description": "The item name is already exist to a seller collection"
          },
          "500": {
            "description": "internal server error"
          }
        },
        "security": [{ "Bearer": [] }]
      },

      "get": {
        "summary": "Get all product items for a seller",
        "tags": ["Seller Product CRUD"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number of items to start with",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to return per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All product items for authenticated seller",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellerProduct"
                  }
                }
              }
            }
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/stats": {
        "get": {
          "summary": "Get all statistics within a given timeframe",
          "tags": [
            "Statistics"
          ],
          "security": [
            {
              "Bearer": []
            }
          ],
          "parameters": [
            {
              "name": "start",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date",
                "example": "2023-02-06"
              },
              "description": "Start date for the statistics timeframe"
            },
            {
              "name": "end",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date",
                "example": "2027-07-14"
              },
              "description": "End date for the statistics timeframe"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "productsStats": {
                            "type": "integer",
                            "example": 0,
                            "description": "Number of products statistics"
                          },
                          "expiredProducts": {
                            "type": "integer",
                            "example": 0,
                            "description": "Number of expired products"
                          },
                          "wishesStats": {
                            "type": "integer",
                            "example": 0,
                            "description": "Number of wishes statistics"
                          },
                          "availableProducts": {
                            "type": "integer",
                            "example": 0,
                            "description": "Number of available products"
                          },
                          "stockLevelStats": {
                            "type": "integer",
                            "example": 0,
                            "description": "Stock level statistics"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "error"
                      },
                      "error": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
    "/api/products/{productId}": {
      "get": {
        "tags": ["Seller Product CRUD"],
        "summary": "get single item in seller collection",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product item selected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerProduct"
                }
              }
            }
          },
          "404": {
            "description": "Product item not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [{ "Bearer": [] }]
      },

      "delete": {
        "tags": ["Seller Product CRUD"],
        "summary": "Delete one item in seller collection",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "204": { "description": "Product item  deleted" },
          "404": { "description": "Product item not found" },
          "500": { "description": "Internal Server Error" }
        },
        "security": [{ "Bearer": [] }]
      },

      "put": {
        "tags": ["Seller Product CRUD"],
        "summary": "update product",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "productCategory": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "stockLevel": {
                    "type": "number"
                  },
                  "productPrice": {
                    "type": "number"
                  },
                  "productDiscount": {
                    "type": "number"
                  },
                  "productCurrency": {
                    "type": "string"
                  },
                  "productImage": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "productDescription": {
                    "type": "string"
                  },
                  "expireDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "productCategory",
                  "productName",
                  "productPrice",
                  "productCurrency",
                  "productDiscount",
                  "productDescription",
                  "productImage",
                  "stockLevel",
                  "expireDate"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "product Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerProduct"
                }
              }
            }
          },
          "404": {
            "description": "Product item not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },   
    "/api/products/{productId}/status": {
      "patch": {
        "tags": ["Seller Product CRUD"],
        "summary": "update product status",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "product status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "404": {
            "description": "Product item not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/products/{productId}/reviews": {
      "post": {
        "tags": ["Reviews"],
        "summary": "Buyer should give a review",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product Id",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": { "type": "number" },
                  "feedback": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Review sent" },
          "401": { "description": "Unauthenticated" },
          "404": { "description": "Product id is invalid" },
          "500": { "description": "Internal Server Error" }
        }
      }
    },
   "/api/carts": {
      "post": {
        "tags": ["Carts"],
        "summary": "get the cart for the single user",
        "description": "Creat the new cart for the user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "productId": {
                      "type": "string"
                    },
                    "Quantity": {
                      "type": "integer"
                    }
                  }
                },
                "required": ["productId", "Quantity"]
              }
            }
          }
        },

        "responses": {
          "201": { "description": "Cart is created" },
          "404": {
            "description": "if there is error happen  "
          }
        },
        "security": [{ "Bearer": [] }]
      },
      "put": {
        "tags": ["Carts"],
        "summary": "Update the cart for the single user",
        "description": "Update the  user Cart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "productId": {
                      "type": "string"
                    },
                    "Quantity": {
                      "type": "integer"
                    }
                  }
                },
                "required": ["productId", "Quantity"]
              }
            }
          }
        },

        "responses": {
          "201": { "description": "Cart is created" },
          "404": {
            "description": "if there is error happen  "
          }
        },
        "security": [{ "Bearer": [] }]
      },
      "get": {
        "tags": ["Carts"],
        "summary": "Update the cart for the single user",
        "description": "Update the  user Cart",

        "responses": {
          "200": { "description": "user Cart" },
          "404": {
            "description": "if there is error happen  "
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/wishes/": {
      "post": {
        "tags": ["Wishes"],
        "summary": "Add/remove product to wish",
        "description": "A buyer add and remove product in wish, adding/remove product into wishlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": { "type": "string" }
                },
                "required": ["productId"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "product saved into wishes successfully" }
        },
        "security": [{ "Bearer": [] }]
      },
      "get": {
        "tags": ["Wishes"],
        "summary": "Get product wishes",
        "description": "A buyer can see products in wish, exploring or visiting wishlist, and seller can see how his products are being wished",
        "responses": {
          "200": {
            "description": "Buyer Wishes/wishlist"
          }
        },
        "security": [{ "Bearer": [] }]
      },
      "delete": {
        "tags": ["Wishes"],
        "summary": "flush/clear wishlist.",
        "description": "A buyer can clear his wishlist at once to remove all products in wish",
        "responses": {
          "200": {
            "description": "Wish list cleared successfully"
          },
          "404": {
            "description": "not found"
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/payments": {
      "post": {
        "summary": "Cart checkouts",
        "description": "Sent Payment request to stripe api",
        "tags": ["Payments"],
        "responses": {
          "200": {
            "description": "stripe payment redirection link"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/orders": {
      "get": {
        "summary": "Get All Orders",
        "description": "Get a list of sent orders",
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "List of all orders"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/orders/{orderId}": {
      "get": {
        "summary": "a buyer or seller get single order",
        "description": "get a single order information",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "order information"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },

    "/api/orders/{orderId}/status": {
      "get": {
        "summary": "A buyer track order status",
        "description": "get a single order status information",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "order status information"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "summary": "Update order status",
        "description": "A seller should able to update order status  to his/her products",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": { "type": "string" }
                },
                "required": ["status"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Oder status successful updated" },
          "401": { "description": "Invalid credentials" },
          "404": { "description": "order not found" },
          "500": { "description": "internal server error" }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/notifications": {
      "get": {
        "summary": "User Notifications",
        "description": "User Notifications",
        "tags": ["Notifications"],
        "responses": {
          "200": { "description": "User Notifications" },
          "500": { "description": "internal server error" }
        },
        "security": [{ "Bearer": [] }]
      },
      "patch": {
        "summary": "User Notifications",
        "description": "User Notifications",
        "tags": ["Notifications"],
        "responses": {
          "201": { "description": "all Notifications Readen" },
          "500": { "description": "internal server error" }
        },
        "security": [{ "Bearer": [] }]
      }
    },
    "/api/notifications/{id}": {
      "patch": {
        "summary": "User Notifications",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "User Notifications",
        "tags": ["Notifications"],
        "responses": {
          "201": { "description": "one Notifications Readen" },
          "500": { "description": "internal server error" }
        },
        "security": [{ "Bearer": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["firstName", "lastName", "email", "password"],
        "properties": {
          "firstName": { "type": "string", "description": "User's first name" },
          "lastName": { "type": "string", "description": "User's last name" },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password"
          }
        }
      },
      "Role": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Role's name"
          }
        }
      },
      "SellerProduct": {
        "type": "object",
        "properties": {
          "productCategory": {
            "type": "string",
            "description": "product item category"
          },
          "productName": {
            "type": "string",
            "description": "product item name "
          },
          "stockLevel": {
            "type": "string",
            "description": "add stock level "
          },
          "productPrice": {
            "type": "string",
            "description": "product item price"
          },
          "productCurrency": {
            "type": "string",
            "description": "the product currency unit"
          },
          "productDescription": {
            "type": "string",
            "description": "Item description"
          },
          "productDiscount": {
            "type": "string"
          },
          "productImage": {
            "type": "string",
            "format": "binary",
            "description": "Item more pictures is required "
          },
          "expireDate": {
            "type": "string",
            "description": "Item expire date is required"
          }
        }
      },
      "status": {
        "type": "object",
        "properties": {
          "isAvailable": {
            "type": "boolean",
            "description": "product status"
          }
        }
      },
      "AddProductCategory": {
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "product item category"
          }
        }
      },
      "Cart": {
        "type": "object",
        "required": ["userId", "product"],
        "properties": {
          "userId": {
            "type": "string",
            "descption": "this come from the user who are logged in "
          },
          "product": {
            "type": "array",
            "description": "add different product object which contain product and also the quantity",
            "items": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "string",
                  "description": "the ID of the product."
                },
                "Quantity": {
                  "type": "integer",
                  "description": "the Quantity of the product you need to add to your cart"
                }
              }
            }
          }
        }
      },
      "Wish": {
        "type": "object",
        "required": ["Product Id"],
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product id"
          },
          "userId": {
            "type": "string",
            "description": "User id"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}